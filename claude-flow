#!/usr/bin/env bash
# Claude-Flow wrapper that works from any directory
# This script finds and executes claude-flow from the project root

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Save the current working directory
CURRENT_DIR="${PWD}"

# Set environment to track where claude-flow was called from
export CLAUDE_WORKING_DIR="${CURRENT_DIR}"
export CLAUDE_PROJECT_ROOT="${SCRIPT_DIR}"

# Check if we're in development mode (running from the git repo)
if [ -f "${SCRIPT_DIR}/src/cli/simple-cli.js" ]; then
  # Development mode - run directly with node
  cd "${CURRENT_DIR}"
  exec node "${SCRIPT_DIR}/src/cli/simple-cli.js" "$@"

# Check for local bin version
elif [ -f "${SCRIPT_DIR}/bin/claude-flow" ]; then
  cd "${CURRENT_DIR}"
  exec "${SCRIPT_DIR}/bin/claude-flow" "$@"

# Check for dist version (after build)
elif [ -f "${SCRIPT_DIR}/dist/cli/simple-cli.js" ]; then
  cd "${CURRENT_DIR}"
  exec node "${SCRIPT_DIR}/dist/cli/simple-cli.js" "$@"

# Check for local node_modules installation
elif [ -f "${SCRIPT_DIR}/node_modules/.bin/claude-flow" ]; then
  cd "${CURRENT_DIR}"
  exec "${SCRIPT_DIR}/node_modules/.bin/claude-flow" "$@"

# Check if claude-flow is globally installed
elif command -v claude-flow &> /dev/null; then
  cd "${CURRENT_DIR}"
  exec claude-flow "$@"

# Fallback to npx
else
  cd "${CURRENT_DIR}"
  exec npx claude-flow@latest "$@"
fi